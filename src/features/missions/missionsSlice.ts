import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import missionsService from "../../services/missionService";
import { InitialStateModel, MissionResponse, ResponseModel } from "../../utils/models";
import robotService from "../../services/robotService";


const initialState : InitialStateModel<MissionResponse> = {
  responseModelList: new ResponseModel<MissionResponse[]>,
  responseModelRow: new ResponseModel<MissionResponse>,
  loading: false,
  error: false,
  dataChanged: false,
  message: ""
};

/**
 * Thunk to get missions list in redux
 */
export const getMissionsList = createAsyncThunk("getMissions", async () => {
  //call getMissions service method
  const res = await missionsService.getMissions();
  return res;
});

/**
 * Thunk to get a mission in redux
 */
export const getMissionById = createAsyncThunk("getMissionById", async (id: number) => {
   
  //call getMissions service method
  const res = await missionsService.getMissionById(id);
  return res;
});

/**
 * Thunk to create mission in redux
 * @param {MissionResponse} _inputData - object of mission data
 */
export const createMission = createAsyncThunk("createMission", async (_inputData: MissionResponse = new MissionResponse()) => {
   
  //call getMissions service method
  const res = await missionsService.createMission(_inputData);
  return res;
});

/**
 * Thunk to update mission in redux
 * @param {MissionResponse} _inputData - object of mission data
 */
export const updateMission = createAsyncThunk("updateMission", async (_inputData: MissionResponse = new MissionResponse()) => {
   
  //call getMissions service method
  const res = await missionsService.updateMission(_inputData);
  return res;
});

/**
 * Thunk to update mission in redux
 * @param {number} id - id
 */
export const deleteMission = createAsyncThunk("deleteMission", async (id: number) => {
   
  //call getMissions service method
  const res = await missionsService.deleteMission(id);
  return res;
});

/**
 * Redux Slice using Redux Toolkit - Toolkit make it easy :) 
 * there are three state which are pending, fulfilled, rejected
 * @fulfilled {number} - returned list of missions
 * @rejected {string} - set error
 * @pending {string} - set loader
 * @returns member 
 */
const missionsSlice = createSlice({
  name: "missionsSlice",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  extraReducers: builder => {
    //getMissionsList
    builder.addCase(getMissionsList.pending, (state, action) => {
      state.loading = true; 
      state.dataChanged = false;
    });
    builder.addCase(getMissionsList.fulfilled, (state, action) => {
      state.loading = false;
      state.responseModelList = action.payload; 
      state.dataChanged = false;
    });
    builder.addCase(getMissionsList.rejected, (state, action) => {
      state.error = true; 
      state.dataChanged = false;
    });

    //createMission
    builder.addCase(createMission.pending, (state, action) => {      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(createMission.fulfilled, (state, action) => {   
      debugger
      state.responseModelRow = action.payload;
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(createMission.rejected, (state, action) => { 
      debugger
      state.error = true;
      state.dataChanged = false;
    });

    //updateMission
    builder.addCase(updateMission.pending, (state, action) => {      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(updateMission.fulfilled, (state, action) => {
      debugger          
      state.loading = false; 
      state.responseModelRow = action.payload;
      state.dataChanged = true;
    });
    builder.addCase(updateMission.rejected, (state, action) => {  
      debugger    
      state.error = true;
      state.dataChanged = false;
    });

    //deleteMission
    builder.addCase(deleteMission.pending, (state, action) => {      
      state.loading = true;
      state.dataChanged = false;
    });
    builder.addCase(deleteMission.fulfilled, (state, action) => {      
      state.loading = false; 
      state.dataChanged = true;
    });
    builder.addCase(deleteMission.rejected, (state, action) => {      
      state.error = true;
      state.dataChanged = false;
    });
  
  },
});

export const { } =
  missionsSlice.actions;

export default missionsSlice.reducer;
